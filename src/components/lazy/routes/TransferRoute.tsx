/**
 * Transfer Route Component - Lazy loaded
 */

import React from 'react';
import { TransferForm } from '../../TransferForm';
import { Card, CardHeader, CardBody } from '../../common';
import { usePerformanceMonitor, OptimizationUtils } from '../../../lib/performance/reactOptimization';

interface TransferRouteProps {
  onPreloadRoute?: (route: string) => void;
  onTransferComplete?: (txHash: string) => void;
  onTransferError?: (error: string) => void;
}

const TransferRoute: React.FC<TransferRouteProps> = ({ 
  onPreloadRoute, 
  onTransferComplete,
  onTransferError 
}) => {
  // Performance monitoring for lazy loaded component
  usePerformanceMonitor('TransferRoute');

  // Stable callbacks
  const stableOnTransferComplete = OptimizationUtils.useStableCallback((txHash: string) => {
    if (onTransferComplete) {
      onTransferComplete(txHash);
    }
  });

  const stableOnTransferError = OptimizationUtils.useStableCallback((error: string) => {
    if (onTransferError) {
      onTransferError(error);
    }
  });

  React.useEffect(() => {
    // Preload signing route when user starts filling the form
    const amountInput = document.querySelector('input[type="number"]');
    if (amountInput && onPreloadRoute) {
      const handleFocus = () => onPreloadRoute('signing');
      amountInput.addEventListener('focus', handleFocus);
      
      return () => {
        amountInput.removeEventListener('focus', handleFocus);
      };
    }
  }, [onPreloadRoute]);

  return (
    <div className="max-w-2xl mx-auto space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-semibold text-gray-900">жђЂжЄЉ</h2>
        <div className="text-sm text-gray-500">
          Lazy loaded
        </div>
      </div>
      
      {/* жђЂжЄЉсЃЋсѓЕсЃ╝сЃа */}
      <Card>
        <CardHeader>
          <h3 className="text-lg font-medium text-gray-900">ADAжђЂжЄЉ</h3>
          <p className="text-sm text-gray-500">жђЂжЄЉтЁѕсЂежЄЉжАЇсѓњтЁЦтіЏсЂЌсЂдсЂЈсЂасЂЋсЂё</p>
        </CardHeader>
        <CardBody>
          <TransferForm
            onTransferComplete={stableOnTransferComplete}
            onTransferError={stableOnTransferError}
          />
        </CardBody>
      </Card>

      {/* Transfer Tips */}
      <Card>
        <CardHeader>
          <h3 className="text-lg font-medium text-gray-900">­ЪњА жђЂжЄЉсЂ«сЃњсЃ│сЃѕ</h3>
        </CardHeader>
        <CardBody>
          <div className="space-y-3 text-sm text-gray-600">
            <div className="flex items-start gap-2">
              <span className="text-orange-500 mt-1">Рђб</span>
              <span>т░ЉжАЇсЂДсЂ«сЃєсѓ╣сЃѕжђЂжЄЉсѓњТјетЦесЂЌсЂЙсЂЎ</span>
            </div>
            <div className="flex items-start gap-2">
              <span className="text-orange-500 mt-1">Рђб</span>
              <span>жђЂжЄЉтЁѕсѓбсЃЅсЃгсѓ╣сѓњт┐ЁсЂџуб║УфЇсЂЌсЂдсЂЈсЂасЂЋсЂё</span>
            </div>
            <div className="flex items-start gap-2">
              <span className="text-orange-500 mt-1">Рђб</span>
              <span>SweepжђЂжЄЉсЂ»ТЅІТЋ░ТќЎсѓњти«сЂЌт╝ЋсЂёсЂЪтЁежАЇсѓњжђЂжЄЉсЂЌсЂЙсЂЎ</span>
            </div>
            <div className="flex items-start gap-2">
              <span className="text-orange-500 mt-1">Рђб</span>
              <span>сЃѕсЃЕсЃ│сѓХсѓ»сѓисЃДсЃ│т«їС║єсЂЙсЂДТЋ░тѕєсЂІсЂІсѓІта┤тљѕсЂїсЂѓсѓісЂЙсЂЎ</span>
            </div>
          </div>
        </CardBody>
      </Card>
    </div>
  );
};

export default TransferRoute;