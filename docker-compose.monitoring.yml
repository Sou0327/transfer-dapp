# Monitoring Stack for Cardano OTC Trading System
# Complete observability solution with Prometheus, Grafana, Loki, and AlertManager

version: '3.8'

services:
  # Prometheus - Metrics Collection and Alerting
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: otc-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - otc-network
    environment:
      - PROMETHEUS_RETENTION_TIME=30d
      - PROMETHEUS_RETENTION_SIZE=10GB
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: '1.0'
        reservations:
          memory: 512m
          cpus: '0.5'

  # Grafana - Visualization and Dashboards
  grafana:
    image: grafana/grafana:10.0.3
    container_name: otc-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards/otc
    networks:
      - otc-network
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      - GF_SERVER_ROOT_URL=https://grafana.${DOMAIN:-localhost}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=grafana
      - GF_DATABASE_PASSWORD=${GRAFANA_DB_PASSWORD:-grafana123}
      - GF_SESSION_PROVIDER=postgres
      - GF_SESSION_PROVIDER_CONFIG=user=grafana password=${GRAFANA_DB_PASSWORD:-grafana123} host=postgres port=5432 dbname=grafana sslmode=disable
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-your-secret-key-here}
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_LOG_MODE=console file
      - GF_LOG_LEVEL=info
    depends_on:
      - postgres
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AlertManager - Alert Management and Routing
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: otc-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://alertmanager.${DOMAIN:-localhost}:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
      - '--log.level=info'
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
      - alertmanager_data:/alertmanager
    networks:
      - otc-network
    environment:
      - SMTP_HOST=${SMTP_HOST:-localhost}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - ALERT_FROM_EMAIL=${ALERT_FROM_EMAIL:-alerts@otc.local}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
      - CRITICAL_EMAIL=${CRITICAL_EMAIL:-critical@otc.local}
      - WARNING_EMAIL=${WARNING_EMAIL:-warnings@otc.local}
      - SECURITY_EMAIL=${SECURITY_EMAIL:-security@otc.local}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: otc-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--collector.systemd'
      - '--collector.processes'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - otc-network
    deploy:
      resources:
        limits:
          memory: 128m
          cpus: '0.1'

  # Postgres Exporter - Database Metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.2
    container_name: otc-postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    networks:
      - otc-network
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres_exporter:${POSTGRES_EXPORTER_PASSWORD:-exporter123}@postgres:5432/otc_system?sslmode=disable
      - PG_EXPORTER_WEB_LISTEN_ADDRESS=:9187
      - PG_EXPORTER_WEB_TELEMETRY_PATH=/metrics
      - PG_EXPORTER_DISABLE_DEFAULT_METRICS=false
      - PG_EXPORTER_DISABLE_SETTINGS_METRICS=false
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          memory: 128m
          cpus: '0.1'

  # Redis Exporter - Cache Metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.53.0
    container_name: otc-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    networks:
      - otc-network
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 64m
          cpus: '0.1'

  # Nginx Exporter - Web Server Metrics
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.11.0
    container_name: otc-nginx-exporter
    restart: unless-stopped
    command:
      - '-nginx.scrape-uri=http://nginx:8080/nginx_status'
    ports:
      - "9113:9113"
    networks:
      - otc-network
    depends_on:
      - nginx
    deploy:
      resources:
        limits:
          memory: 32m
          cpus: '0.05'

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: otc-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - otc-network
    command:
      - '--housekeeping_interval=30s'
      - '--docker_only=true'
      - '--store_container_labels=false'
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: '0.2'

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: otc-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml -target=all
    volumes:
      - loki_data:/loki
      - ./logging/loki:/etc/loki
    networks:
      - otc-network
    environment:
      - LOKI_AUTH_ENABLED=false
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'

  # Promtail - Log Collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: otc-promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./logging/promtail:/etc/promtail
    command: -config.file=/etc/promtail/config.yml
    networks:
      - otc-network
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          memory: 128m
          cpus: '0.1'

  # Elasticsearch - Log Storage and Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: otc-elasticsearch
    restart: unless-stopped
    environment:
      - node.name=elasticsearch
      - cluster.name=otc-logs
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./logging/elasticsearch/templates:/usr/share/elasticsearch/templates
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - otc-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: '1.0'
        reservations:
          memory: 1g
          cpus: '0.5'

  # Logstash - Log Processing and Enrichment
  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.0
    container_name: otc-logstash
    restart: unless-stopped
    volumes:
      - ./logging/logstash:/usr/share/logstash/pipeline
      - ./logging/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - logstash_data:/usr/share/logstash/data
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
      - "514:514"
      - "12201:12201/udp"
    environment:
      - "LS_JAVA_OPTS=-Xmx1g -Xms1g"
      - ELASTIC_HOSTS=http://elasticsearch:9200
    networks:
      - otc-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: '1.0'
        reservations:
          memory: 1g
          cpus: '0.5'

  # Filebeat - Log Shipping
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.9.0
    container_name: otc-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./logging/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log:/var/log:ro
      - filebeat_data:/usr/share/filebeat/data
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - LOGSTASH_HOSTS=logstash:5044
    networks:
      - otc-network
    depends_on:
      - logstash
      - elasticsearch
    command: ["--strict.perms=false"]
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: '0.2'

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local
  elasticsearch_data:
    driver: local
  logstash_data:
    driver: local
  filebeat_data:
    driver: local

networks:
  otc-network:
    external: true