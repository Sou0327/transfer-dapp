
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: otc-postgres
    environment:
      POSTGRES_DB: otc_system
      POSTGRES_USER: otc_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-otc_secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - otc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U otc_user -d otc_system"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: otc-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password_123}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - otc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_secure_password_123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Application (Frontend + Backend)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: otc-app
    environment:
      # Application
      NODE_ENV: production
      PORT: 4000
      HOST: 0.0.0.0
      
      # Database
      DATABASE_URL: postgres://otc_user:${DB_PASSWORD:-otc_secure_password_123}@postgres:5432/otc_system
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password_123}@redis:6379
      
      # JWT & Security
      JWT_SECRET: ${JWT_SECRET:-otc-local-development-jwt-secret-key-32chars}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-32charslongencryptionkeyforlocal}
      
      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:4000}
      
      # Cardano Network (修正: BLOCKFROST_API_KEY使用)
      CARDANO_NETWORK: ${CARDANO_NETWORK:-mainnet}
      BLOCKFROST_API_URL: ${BLOCKFROST_API_URL:-https://cardano-mainnet.blockfrost.io/api/v0}
      BLOCKFROST_API_KEY: ${BLOCKFROST_API_KEY:-mainnetYourBlockfrostAPIKeyHere}
      VITE_BLOCKFROST_API_KEY: ${VITE_BLOCKFROST_API_KEY:-mainnetYourBlockfrostAPIKeyHere}
      
      # Other settings
      LOG_LEVEL: ${LOG_LEVEL:-info}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900000}
      
    ports:
      - "127.0.0.1:4000:4000"
    volumes:
      - ./logs:/app/logs
    networks:
      - otc-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  otc-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: